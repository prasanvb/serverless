org: prasanvb
app: serverless
service: serverless-dynamodb

stages:
  # Disable Serverless Framework Observability
  default:
    observability: false

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  stage: 'dev'
  region: 'us-west-2'
  memorySize: 512
  # default timeout of the API gateway is 30 sec
  timeout: 30
  environment:
    USERS_TABLE: ${self:custom.usersTableName}
  # Mitigate Error: CREATE_FAILED: CustomApiGatewayAccountCloudWatchRole (Custom::ApiGatewayAccountRole)
  logs:
    restApi: 
      accessLogging: false
      executionLogging: false

functions:
  createUser:
    handler: functions/user/handler.createUser
    description: "Create a new user"
    events:
      - http:
          path: user
          method: post
          cors: true
    role: customRole

plugins:
  - serverless-offline

custom:
  usersTableName: usersTable-${opt:stage, self:provider.stage}

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.usersTableName}
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
          - AttributeName: country
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 10
        GlobalSecondaryIndexes:
          - IndexName: createdAtIndex
            KeySchema:
              - AttributeName: country
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection: 
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 10    
    customRole: 
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: "LambdaDynamoDBFullAccess"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"                    
                  # arn:aws:lambda:us-west-2:980921714626:function:serverless-dynamodb-dev-createUser
                  Resource: 
                    - "Fn::Join":
                      - ":"
                      - 
                        - "arn:aws:logs"
                        - Ref: "AWS::Region"
                        - Ref: "AWS::AccountId"
                        - "log-group:/aws/lambda/*:*:*"
                - Effect: "Allow"
                  Action:
                    - "dynamodb:*"
                  Resource: "arn:aws:dynamodb:*:*:table/*"
                - Effect: "Allow"
                  Action:
                    - "dynamodb:ListTables"
                  Resource: "*"
        Path: "/"
        RoleName: "LambdaDynamoDBFullAccessRole"
