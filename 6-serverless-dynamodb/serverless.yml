# Commented the app and org Settings to disable Serverless Framework Observability
# org: prasanvb
# app: serverless
service: serverless-dynamodb

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  stage: 'dev'
  region: 'us-west-2'
  memorySize: 512
  # default timeout of the API gateway is 30 sec
  timeout: 30
  environment:
    USERS_TABLE: ${self:custom.usersTableName}
    EMAIL_FROM_ADDRESS: "bala.prasanv@gmail.com"
  logs:
    # Mitigate Error: CREATE_FAILED: CustomApiGatewayAccountCloudWatchRole (Custom::ApiGatewayAccountRole)
    restApi: 
      accessLogging: false
      executionLogging: false

functions:
  createUser:
    handler: functions/user/handler.createUser
    description: "Create a new user"
    events:
      - http:
          path: user
          method: post
          cors: true
    role: customLambdaExecutionRole
  getUser:
    handler: functions/user/handler.getUser
    description: "Get user by email"
    events:
      - http:
          path: user/{email}
          method: get
          cors: true
    role: customLambdaExecutionRole
  # https://g07wtfh8a7.execute-api.us-west-2.amazonaws.com/dev/user/query
  queryUsers:
    handler: functions/user/handler.queryUsers
    description: "Query user table"
    events:
      - http:
          path: user/query
          method: post
          cors: true
    role: customLambdaExecutionRole
  # https://g07wtfh8a7.execute-api.us-west-2.amazonaws.com/dev/user/query/index
  queryUserCreatedAtIndex:
    handler: functions/user/handler.queryUserCreatedAtIndex
    description: "Query user by createAtIndex"
    events:
      - http:
          path: user/query/index
          method: post
          cors: true
    role: customLambdaExecutionRole
  # https://g07wtfh8a7.execute-api.us-west-2.amazonaws.com/dev/user/scan/index
  scanUserCreatedAtIndex:
    handler: functions/user/handler.scanUserCreatedAtIndex
    description: "Scan user by createAtIndex"
    events:
      - http:
          path: user/scan/index
          method: post
          cors: true
    role: customLambdaExecutionRole
  notifyUser:
    handler: functions/user/handler.notifyUser
    description: "Notify user with an email"
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - UsersTable
              - StreamArn
          batchSize: 1    # Number of records the Lambda function will process at once
          startingPosition: LATEST  # Start processing from the latest record
          enabled: true    # Enable the event source mapping
    role: customLambdaExecutionRole

plugins:
  - serverless-offline

custom:
  usersTableName: usersTable-${opt:stage, self:provider.stage}

resources:
  Resources:
    # Create a table with name "UsersTable" and Global Secondary Index "createdAtIndex" 
    # email, country and createdAt are initial attributes and you can add more attributes in the putItem because dynamoDB is un-structured document 
    # email is declared primary Key/partition key 
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.usersTableName}
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
          - AttributeName: country
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          # Partition Key
          - AttributeName: email
            KeyType: HASH
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 10
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        GlobalSecondaryIndexes:
          - IndexName: createdAtIndex
            KeySchema:
              # Partition Key
              - AttributeName: country
                KeyType: HASH
              # Sort Key
              - AttributeName: createdAt
                KeyType: RANGE
            Projection: 
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 10
    # Custom role is created and its assumed by lambda
    # Policy attached has 2 statements - create log group and log events and perform actions on dynamodb tables and indexes 
    customLambdaExecutionRole: 
      Type: "AWS::IAM::Role"
      Properties:
        Path: "/"
        RoleName: "LambdaExecRole"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: "LambdaLogGroupAndDynamoDBFullAccess"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"                    
                  Resource: 
                    # arn:aws:logs:us-west-2:980921714626:log-group:/aws/lambda/*:*:*
                    - "Fn::Join":
                      - ":"
                      - 
                        - "arn:aws:logs"
                        - Ref: "AWS::Region"
                        - Ref: "AWS::AccountId"
                        - "log-group:/aws/lambda/*:*:*"
                - Effect: "Allow"
                  Action:
                    - "dynamodb:ListTables"
                    - "dynamodb:PutItem"
                    - "dynamodb:GetItem"
                    - "dynamodb:Query"
                    - "dynamodb:Scan"
                    - "dynamodb:DescribeStream"
                    - "dynamodb:GetRecords"
                    - "dynamodb:GetShardIterator"
                    - "dynamodb:ListStreams"
                  Resource: 
                  # Allow querying the base table and the Global Secondary Index
                    - "arn:aws:dynamodb:*:*:table/*"
                    - "arn:aws:dynamodb:*:*:table/*/index/*"
                  # arn:aws:dynamodb:us-west-2:980921714626:table/usersTable-dev/stream/2024-11-29T05:48:38.695
                    - "arn:aws:dynamodb:*:*:table/*/stream/*"
                - Effect: "Allow"
                  Action:
                    - "ses:SendEmail"
                    - "ses:SendRawEmail"
                  Resource: "*"
                
        
